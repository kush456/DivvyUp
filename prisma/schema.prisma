generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                 @id @default(autoincrement())
  name                    String
  email                   String              @unique
  password                String
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  expenseSettlementsPayee ExpenseSettlement[] @relation("ExpenseSettlementPayee")
  expenseSettlementsPayer ExpenseSettlement[] @relation("ExpenseSettlementPayer")
  friendOf                Friend[]            @relation("FriendOfUser")
  friends                 Friend[]            @relation("UserIsFriend")
  receivedFriendRequests  FriendRequest[]     @relation("ReceiverRequests")
  sentFriendRequests      FriendRequest[]     @relation("SenderRequests")
  balances                GroupBalance[]      @relation("UserToBalances")
  groupSettlementsPayee   GroupSettlement[]   @relation("GroupSettlementPayee")
  groupSettlementsPayer   GroupSettlement[]   @relation("GroupSettlementPayer")
  participants            Participant[]
  settlementsPayee        Settlement[]        @relation("SettlementPayee")
  settlementsPayer        Settlement[]        @relation("SettlementPayer")
  groups                  Group[]             @relation("GroupMemberships")
}

model Friend {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  createdAt DateTime @default(now())
  friend    User     @relation("FriendOfUser", fields: [friendId], references: [id])
  user      User     @relation("UserIsFriend", fields: [userId], references: [id])

  @@unique([userId, friendId])
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceiverRequests", fields: [receiverId], references: [id])
  sender     User     @relation("SenderRequests", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
}

model Group {
  id                 Int                 @id @default(autoincrement())
  name               String
  createdAt          DateTime            @default(now())
  expenses           Expense[]           @relation("GroupExpenses")
  expenseSettlements ExpenseSettlement[] @relation("GroupToExpenseSettlement")
  balances           GroupBalance[]      @relation("GroupToBalances")
  groupSettlements   GroupSettlement[]   @relation("GroupSettlement")
  settlements        Settlement[]
  members            User[]              @relation("GroupMemberships")
}

model GroupBalance {
  id      Int   @id @default(autoincrement())
  groupId Int
  userId  Int
  balance Float @default(0)
  group   Group @relation("GroupToBalances", fields: [groupId], references: [id])
  user    User  @relation("UserToBalances", fields: [userId], references: [id])

  @@unique([groupId, userId])
}

model GroupSettlement {
  id        Int      @id @default(autoincrement())
  groupId   Int
  payerId   Int
  payeeId   Int
  amount    Float
  createdAt DateTime @default(now())
  group     Group    @relation("GroupSettlement", fields: [groupId], references: [id])
  payee     User     @relation("GroupSettlementPayee", fields: [payeeId], references: [id])
  payer     User     @relation("GroupSettlementPayer", fields: [payerId], references: [id])

  @@unique([payerId, payeeId, groupId])
}

model Expense {
  id                 Int                 @id @default(autoincrement())
  description        String
  groupId            Int?
  createdAt          DateTime            @default(now())
  splitType          String
  totalAmount        Float
  group              Group?              @relation("GroupExpenses", fields: [groupId], references: [id])
  expenseSettlements ExpenseSettlement[] @relation("ExpenseSettlements")
  participants       Participant[]
}

model Participant {
  id         Int     @id @default(autoincrement())
  expenseId  Int
  userId     Int
  weight     Float
  paidAmount Float
  expense    Expense @relation(fields: [expenseId], references: [id])
  user       User    @relation(fields: [userId], references: [id])

  @@unique([expenseId, userId])
}

model Settlement {
  id        Int      @id @default(autoincrement())
  amount    Float
  payerId   Int
  payeeId   Int
  groupId   Int?
  createdAt DateTime @default(now())
  group     Group?   @relation(fields: [groupId], references: [id])
  payee     User     @relation("SettlementPayee", fields: [payeeId], references: [id])
  payer     User     @relation("SettlementPayer", fields: [payerId], references: [id])
}

model ExpenseSettlement {
  id        Int      @id @default(autoincrement())
  expenseId Int
  payerId   Int
  payeeId   Int
  amount    Float
  createdAt DateTime @default(now())
  groupId   Int?
  status    String   @default("unsettled")
  expense   Expense  @relation("ExpenseSettlements", fields: [expenseId], references: [id])
  group     Group?   @relation("GroupToExpenseSettlement", fields: [groupId], references: [id])
  payee     User     @relation("ExpenseSettlementPayee", fields: [payeeId], references: [id])
  payer     User     @relation("ExpenseSettlementPayer", fields: [payerId], references: [id])

  @@unique([expenseId, payerId, payeeId])
}
