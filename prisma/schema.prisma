// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  friends    Friend[]  @relation("UserIsFriend") // Updated relation name
  friendOf   Friend[]  @relation("FriendOfUser") // New relation for "friendId"
  groups     Group[]   @relation("GroupMemberships")
  settlementsPayer   Settlement[] @relation("SettlementPayer") // Settlements as a payer
  settlementsPayee   Settlement[] @relation("SettlementPayee") // Settlements as a payee
  participants Participant[]
  sentFriendRequests  FriendRequest[]  @relation("SenderRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceiverRequests")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Friend {
  id        Int   @id @default(autoincrement())
  userId    Int
  friendId  Int
  user      User  @relation("UserIsFriend", fields: [userId], references: [id]) // Updated relation name
  friend    User  @relation("FriendOfUser", fields: [friendId], references: [id]) // Updated relation name
  createdAt DateTime @default(now())

  @@unique([userId, friendId]) // Prevents duplicate friendships
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  sender     User     @relation("SenderRequests", fields: [senderId], references: [id])
  receiver   User     @relation("ReceiverRequests", fields: [receiverId], references: [id])
  status     String   @default("pending") // Can be 'pending', 'accepted', or 'rejected'
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId]) // Prevents duplicate requests
}

model Group {
  id        Int       @id @default(autoincrement())
  name      String
  members   User[]    @relation("GroupMemberships")
  expenses  Expense[] @relation("GroupExpenses")
  settlements Settlement[]
  createdAt DateTime  @default(now())
}

model Expense {
  id          Int       @id @default(autoincrement())
  totalAmount Float
  description String
  splitType   String
  groupId     Int?
  group       Group?    @relation("GroupExpenses", fields: [groupId], references: [id])
  participants Participant[]
  createdAt   DateTime  @default(now())
}

model Participant {
  id         Int     @id @default(autoincrement())
  expenseId  Int
  userId     Int
  weight     Float
  paidAmount Float
  expense    Expense @relation(fields: [expenseId], references: [id])
  user       User    @relation(fields: [userId], references: [id])

  @@unique([expenseId, userId]) // Ensures a user is only added once per expense
}

model Settlement {
  id          Int      @id @default(autoincrement())
  amount      Float
  payerId     Int
  payeeId     Int
  payer       User     @relation("SettlementPayer", fields: [payerId], references: [id])
  payee       User     @relation("SettlementPayee", fields: [payeeId], references: [id])
  groupId     Int?
  group       Group?   @relation(fields: [groupId], references: [id])
  createdAt   DateTime @default(now())
}
